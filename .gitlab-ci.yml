---
# Based on the Maven CI/CD template from GitLab: https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true
  SAST_JAVA_VERSION: 17
  HEROKU_APP_NAME: sitodo-example
  DEPLOY_PRODUCTION_URL: https://sitodo-example.herokuapp.com

# Check the list of available templates at https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates
include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml

stages:
  - build
  - test
  - deploy
  - visualize

build:
  stage: build
  image: docker.io/library/maven:3.8.6-eclipse-temurin-17-focal
  script:
    - mvn $MAVEN_CLI_OPTS -DskipTests
      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository package
  cache:
    key:
      files:
        - pom.xml
      prefix: $CI_JOB_NAME
    paths:
      - .m2/repository
  artifacts:
    paths:
      - .m2/
      - target/

test:unit:
  stage: test
  image: docker.io/library/maven:3.8.6-eclipse-temurin-17-focal
  script:
    - mvn $MAVEN_CLI_OPTS test
      -Dgroups=unit
      -Djacoco.destFile=$CI_PROJECT_DIR/target/jacoco-unit.exec
  needs: []
  cache:
    key:
      files:
        - pom.xml
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/surefire-reports
      - target/*.exec
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

test:functional:
  stage: test
  image: docker.io/library/maven:3.8.6-eclipse-temurin-17-focal
  before_script:
    - apt-get update && apt-get install -y firefox
  script:
    - mvn $MAVEN_CLI_OPTS test
      -Dgroups=e2e
      -Djacoco.destFile=$CI_PROJECT_DIR/target/jacoco-functional.exec
  needs: []
  cache:
    key:
      files:
        - pom.xml
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/surefire-reports
      - target/*.exec
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

test:coverage:
  stage: test
  image: docker.io/library/maven:3.8.6-eclipse-temurin-17-focal
  script:
    - mvn $MAVEN_CLI_OPTS verify -DskipTests
    - grep "Total" target/site/jacoco/index.html
  coverage: '/Total.*?([0-9]{1,3})%/'
  needs:
    - job: test:unit
      artifacts: true
    - job: test:functional
      artifacts: true
  cache:
    key:
      files:
        - pom.xml
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml

deploy:
  stage: deploy
  image: docker.io/library/ruby:2.7.6-alpine3.16
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: test:unit
      artifacts: false
    - job: test:functional
      artifacts: false
  before_script:
    - apk add --no-cache build-base curl git ruby-dev
    - gem install 'dpl:2.0.3.beta.3'
  script:
    - dpl heroku api --api-key $HEROKU_API_KEY --app $HEROKU_APP_NAME
  environment:
    name: production
    deployment_tier: production
    url: $DEPLOY_PRODUCTION_URL

# Override spotbugs-sast (SAST) to analyze compiled Java artifacts
spotbugs-sast:
  variables:
    MAVEN_REPO_PATH: ".m2/repository"
    COMPILE: "false"
  needs:
    - job: build
      artifacts: true

# Override code_quality job from the template through the environment variables
code_quality:
  allow_failure: false
  variables:
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.27"

# Taken from: https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html#maven-example
coverage_visualization:
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.8
  script:
    - python /opt/cover2cover.py target/site/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/
      > target/site/cobertura.xml
  needs:
    - job: test:coverage
      artifacts: true
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/site/cobertura.xml
